install.packages("swirl")
library(swirl)
install_from_swirl(Exploratory data analysis)
swirl()
install_from_swirl("Exploratory_Data_Analysis")
swirl()
install.packages("ggplot2")
swirl()
library(swirl)
swirl()
head(pollution)
dim(pollution)
summary(pollution$pm25)
ppm <- pollution$pm25
quantile(ppm)
boxplot(ppm)
boxplot(ppm, col="blue")
abline(h =12)
hist(ppm, col = "green")
rug
rug(ppm)
high
low
high
hist(ppm, col="green", breaks=100)
rug(ppm)
hist(ppm, col = "green")
abline(v =12, lwwd =2)
abline(v =12, lwd =2)
abline(v =median(ppm), lwd =4, col="magenta")
head(pllution)
head(pollution)
names(pollution)
reg <- table(pollution$region)
reg
barplot(reg)
barplot(reg, col="wheat")
barplot(reg, col="wheat", main = "Number of Counties in Each Region")
boxplot(pm25~region, data=pollution)
boxplot(pm25~region, data=pollution, col = "red")
par(mfrow=c(2,1), mar=c(4,4,2,1))
east <- subset(pollution, region = "east")
east <- subset(pollution, region == "east")
head(east)
hist(east$pm25, col="green")
west <- subset(pollution, region == "west")
hist(subset(pollution$pm25, region=="west") col="green")
hist(subset(pollution, region=="west")$pm25 col="green")
hist(subset(pollution, region=="west")$pm25, col="green")
hist(east$pm25, col="green")
with(pollution)
with(pollution, plot(latitude,pm25))
abline(h=12, lwd = 2, lty = 2)
plot(pollution$latitude,ppm, col=pollution$region)
abline(h=12, lwd =2, lty =2)
par(mfrow)
par(mfrow=c(1,2), mar = c(5,4,2,1))
west <- subset(pollution, region == "west")
plot(west$latitude, west$pm25, main="West")
plot(east$latitude, east$pm25, main="West")
plot(east$latitude, east$pm25, main="East")
?Devices
datasets
datasets(eruptions)
datasets(faithful)
plot(eruptions,waiting)
plot()
plot(faithful$eruption, faithful$waiting)
with(faithful, plot(eruptions, wainting))
with(faithful, plot(eruptions, waiting))
title(main="Old Faithful Geyser data")
dev.cur()
pdf(file="myplot.pdf")
with(faithful, plot(eruptions, waiting))
title(main="Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful, plot(eruptions, waiting))
title(main="Old Faithful Geyser data")
dev.copy(png, "geyserplot.png")
dev.copy(png, file="geyserplot.png")
dev.off()
head(cars)
with(cars, plot(speed,dist))
text(mean(cars$speed), max(cars$dist), main= "SWIRL rules!")
text(mean(cars$speed), max(cars$dist), "SWIRL rules!")
head(state)
table(state$region)
with(state, xyplot(Life.Exp ~ Income | region, Income, c(4,1)))
xyplot(state.Life.Exp ~ Income | region, state.Income, c(4,1))
xyplot(state$Life.Exp ~ Income | region, state$Income, c(4,1))
xyplot(state$Life.Exp ~ stete$Income | state$region, state$Income, c(4,1))
xyplot(state$Life.Exp ~ stete$Income | state$region, state$Income, c(4,1))
View(state)
View(state)
xyplot(Life.Exp ~ Income | region, data = state, layout = c(4, 1))
xyplot(Life.Exp ~ Income | region, data = state, layout = c(2, 2))
head(mpg)
dim(mpg)
table(mpg$model)
qplot(mpg$displ, hwy, data = mpg)
qplot(displ, hwy, data = mpg)
head(airquality)
range(airquality$Ozone, na.rm= TRUE)
hist(airquality$Ozone)
dev.off()
table(airquality$Month)
boxplot(Ozone~Month, airquality)
boxplot(Ozone~Month, airquality, xlab = "Month", ylab = "Ozone (ppb)", col.axis = "blue", col.lab = "red")
boxplot(Ozone~Month, airquality, xlab = "Month", ylab = "Ozone (ppb)", col.axis = "blue", col.lab = "red", main = "Ozone and Wind in New York City")
title(main = "Ozone and Wind in New York City")
with(airquality, plot(Wind, Ozone))
title(main = "Ozone and Wind in New York City")
lenght(par())
length(par())
names(par())
par()$pin
par("fg")
?pch
?pc
par(pch)
par("pch")
par("lty")
plot(airquality$Wind, airquality$Ozone, set = "n")
plot(airquality$Wind, airquality$Ozone, type = "n")
title(main = "Wind and Ozone in NYC")
may <- subset(airquality, airquality$Month == 5)
may <- subset(airquality, Month == 5)
points(may$Wind, may$Ozone, pch = 2)
points(may$Wind, may$Ozone, col = "blue", pch = 17)
notmay <- subset(airquality, Month != 5)
points(notmay$Wind, notmay$Ozone, col = "red", pch = 18)
points(notmay$Wind, notmay$Ozone, col = "red", pch = 8)
legend("topright", c(pch(17,8), c("blue", "red"),c("May", "Other Months")))
legend("topright", c(c(17,8), c("blue", "red"),c("May", "Other Months")))
legend("topright", pch=c(c(17,8), col=c("blue", "red"),legend=c("May", "Other Months"))
)
legend("topright", pch=c(17,8), col=c("blue", "red"),legend=c("May", "Other Months"))
abline(v=median(airquality$Wind), lty = 2, lwy =2)
abline(v=median(airquality$Wind), lty = 2, lwd =2)
par(mfrow(c(1,2)))
mfrow(c(1,2))
par=mfrow(c(1,2))
par(mfrow=c(1,2))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
par(mfrow=c(1,3), mar= c(4,4,2,1), oma = c(0,0,2,0))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
plot(airquality$Solar.R, airquality$Ozone, main = "Ozone and Solar Radiation")
plot(airquality$Temp, airquality$Ozone, main = "Ozone and Temperature")
title(main= "Ozone and Weather in New York City")
title(main= "Ozone and Weather in New York City", outer = TRE)
title(main= "Ozone and Weather in New York City", outer = TRuE)
mtext("Ozone and Weather in New York City", outer = TRuE)
mtext("Ozone and Weather in New York City", outer = TRUE)
library(datasets)
data(airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
g <- ggplot(movies, aes(votes, rating))
print(g)
library(swirl)
swirl()
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv)
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv)
quit()
library(swirl)
swirl()
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv)
skip()
swirl()
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv)
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv)
info()
main()
main()
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv)
swirl()
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv)
g<-ggplot(mpg, displ, hwy)
g<-ggplot(mpg, aes(displ, hwy)
)
summary(g)
g+geom_point()
g+geom_smooth()
g+geom_point()+geom_smooth()
g+geom_point()+geom_smooth(method="lm")
g+geom_point()+geom_smooth(method="lm")+facet_grid(.~drv)
g+geom_point()+geom_smooth(method="lm")+facet_grid(.~drv)+ggtitle("Swirl Rules!")
g+geom_point(color="pink", size=4, alpha=1/2)
g+geom_point(size=4, alpha=1/2, aes(color=drv))
g+geom_point(aes(color=drv))+labs("Swirl Rules!")+labs(x="Displacement", y="Mileage")
g+geom_point(aes(color=drv))+labs(title="Swirl Rules!")+labs(x="Displacement", y="Mileage")
g+geom_point(aes(color=drv))+labs(title="Swirl Rules!")+labs(x="Displacement", y="Mileage")
g + geom_point(aes(color = drv)) + labs(title="Swirl Rules!") +
| labs(x="Displacement", y="Hwy Mileage")
g + geom_point(aes(color = drv)) + labs(title="Swirl Rules!") + labs(x="Displacement", y="Hwy Mileage")
g+geom_point(aes(color=drv)),size=2, alpha=1/2)+geom_smooth(size=4,linetype=,method="lm", se=FALSE)
g+geom_point(aes(color=drv)),size=2, alpha=1/2)+geom_smooth(size=4,linetype=,method="lm", se=FALSE)
g+geom_point(aes(color=drv),size=2, alpha=1/2)+geom_smooth(size=4,linetype=,method="lm", se=FALSE)
g+geom_point(aes(color=drv),size=2, alpha=1/2)+geom_smooth(size=4,linetype=3,method="lm", se=FALSE)
g+geom_point(aes(color=drv))+theme_bw()
g+geom_point(aes(color=drv))+theme_bw(base_family = "Times")
plot(myx,myy,type="l",ylim=C(-3,3))
plot(myx,myy,type="l",ylim=C(-3,3))
plot(myx, myy, type = "l", ylim = c(-3,3))
g<-ggplot(testdat, aes(x=myx,y=myy))
g+geom_lie(0)
g+geom_line(0)
g+geom_line()
g+geom_line()+ylim(-3,3)
g+geom_line()+coord_cartesian(ylim=c(-3,3))
g<-ggplot(mpg,aes(x=displ,y=hwy,color=factor(year)))
g+geom_point()
g+geom_point()+facet_grid(drv~cyl,margins = TRUE)
g+geom_point()+facet_grid(drv~cyl,margins = TRUE)+geom_smooth(method="lm",se=FALSE,size=2,color="black")
g+geom_point()+facet_grid(drv~cyl,margins = TRUE)+geom_smooth(method="lm",se=FALSE,size=2,color="black")+labs(x="Displacement", y="Highway Mileage", title="Swirl Rules!")
str(diamonds)
qplot(price, data=diamonds)
range(diamonds$price)
qplot(price, data=diamonds, bindwidth = 18497/30)
qplot(price, data=diamonds, binwidth = 18497/30)
brk
counts
qplot(price, data=diamonds, binwidth = 18497/30, fill=cut())
qplot(price, data=diamonds, binwidth = 18497/30, fill=cut)
qplot(price, data=diamonds, geom="density")
qplot(price, data=diamonds, geom="density",color=cut)
qplot(carat,price,data=diamonds)
qplot(carat,price,data=diamonds,shape=cut
)
qplot(carat,price,data=diamonds,color=cut)
qplot(carat,price,data=diamonds,color=cut,geom=c("point","smooth"),method="lm")
qplot(carat,price,data=diamonds,color=cut,geom=c("point","smooth"))
qplot(carat,price,data=diamonds,color=cut,geom=c("point","smooth"))
nxt()
qplot(carat,price,data=diamonds,color=cut,geom=c("point","smooth"))
skip()
swirl()
str(diamonds)
qplot(price, data=diamonds)
range(diamonds$price)
qplot(price, data=diamonds, bindwidth = 18497/30)
qplot(price, data=diamonds, binwidth = 18497/30)
brk
counts
qplot(price, data=diamonds, binwidth = 18497/30, fill=cut)
qplot(price, data=diamonds, geom="density")
qplot(price, data=diamonds, geom="density",color=cut)
qplot(carat, price, data=diamonds)
qplot(carat, price, data=diamonds, shape=cut)
qplot(carat, price, data=diamonds, colors=cut)
qplot(carat, price, data=diamonds, color=cut)
qplot(carat,price,data=diamonds,color=cut,geom=c("point","smooth"))
swirl()
qplot(carat,price,data=diamonds,color=cut,geom=c("point","smooth"))
swirl()
str(diamonds)
qplot(price,data=diamonds)
range(diamonds$price)
qplot(price,data=diamonds,binwidth=18497/30)
brk
counts
qplot(price,data=diamonds,binwidth=18497/30,fill=cut)
qplot(price,data=diamonds,geom="density")
qplot(price,data=diamonds,geom="density",color=cut)
qplot(carat,price,data=diamonds)
qplot(carat,price,data=diamonds, shape=cut)
qplot(carat,price,data=diamonds, color=cut)
qplot(carat,price,data=diamonds, color=cut,geom=c("point","smooth"))
qplot(carat,price,data=diamonds, color=cut,geom=c("point","smooth"),method="lm",facets=.~cut)
qplot(carat,price,data=diamonds, color=cut,geom=c("point","smooth"),method="lm",facets=.~cut)
1
info()
main()
qplot(carat,price,data=diamonds, color=cut,geom=c("point","smooth"),facets=.~cut)
skip()
swirl()
str(diamonds)
qplot(price,data=diamonds)
range(diamonds$price)
qplot(price,data=diamonds,binwidth=18497/30,fill=cut)
qplot(price,data=diamonds,binwidth=18497/30)
brk
counts
qplot(price,data=diamonds,binwidth=18497/30,fill=cut
)
qplot(price,data=diamonds,binwidth=18497/30,fill=cut, geom="density")
qplot(price,data=diamonds,geom="density")
qplot(price,data=diamonds,geom="density",color=cut)
qplot(carat,price,data=diamonds)
qplot(carat,price,data=diamonds, color=cut)
qplot(carat,price,data=diamonds, color=cut,geom=c("point","smooth"))
qplot(carat,price,data=diamonds, shape=cut)
qplot(carat,price,data=diamonds, color=cut)
qplot(carat,price,data=diamonds, color=cut,geom=c("point","smooth"))
qplot(carat,price,data=diamonds, color=cut,geom=c("point","smooth"),facets=.~cut)
g<-ggplot(diamonds,aes(depth, price))
g
summary(g)
g+geom_point()
g+geom_point(alpha=1/3)
cutpoints<-quantile(diamonds$carat,seq(0,1,length=4),na.rm=TRUE)
cutpoints
diamonds$car2 <- cut(diamonds$carat,cutpoints)
g<-ggplot(diamonds,aes(depth, price))
g+geom_point(alpha=1/3)+facet_grid(cut~car2)
diamonds[myd,]
g+geom_point(alpha=1/3)+facet_grid(cut~car2)+geom_smooth(method="lm",size=3,color="pink")
ggplot(diamonds,aes(carat,price))+geom_boxplot()+facet_grid(.~cut)
skip()
main()
exit
setwd("C:/Coursera/RepData_PeerAssessment1")
View(dataMatrix)
source('~/.active-rstudio-document')
source('C:/Coursera/RepData_PeerAssessment1/test_script.R')
source('C:/Coursera/RepData_PeerAssessment1/test_script.R')
hist(activityMonitoringData)
head(activityMonitoringData)
?hist
hist(activityMonitoringData$steps)
aggStepsDay <- aggregate(steps ~ date, activityMonitoringData, sum))
aggStepsDay <- aggregate(steps ~ date, activityMonitoringData, sum)
hist(aggStepsDady$steps)
hist(aggStepsDay$steps)
View(activityMonitoringData)
